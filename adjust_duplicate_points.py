# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AdjustDuplicatePoints
                                 A QGIS plugin
 adjust duplicate points
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-02-07
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Ed B
        email                : boesiii@yahoo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 https://howtoinqgis.wordpress.com/2016/12/01/how-to-count-duplicate-points-in-qgis-using-python/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QPoint
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .adjust_duplicate_points_dialog import AdjustDuplicatePointsDialog
import os.path
import math
from qgis.core import *


class AdjustDuplicatePoints:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AdjustDuplicatePoints_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Adjust Duplicate Points')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AdjustDuplicatePoints', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/adjust_duplicate_points/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Adjust duplicate points'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Adjust Duplicate Points'),
                action)
            self.iface.removeToolBarIcon(action)

    def asbv(self, value):
        # print (value)
        if 0 <= value <= 90:
            value = value + 270
        elif 90 < value <=360:
            value = value - 90
        # print ('adjust')
        # print ('adjusted value: ' + str(value))
        self.dlg.spinBox.setValue(value)
        
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = AdjustDuplicatePointsDialog()
            
        layer = self.iface.activeLayer()
        selection = layer.selectedFeatures()
        # layer = self.iface.activeLayer()
        self.dlg.num_selected_objects.setText(str(len(selection)))
        if 0 < len(selection) <= 3:
            self.dlg.shiftdoubleSpinBox.setValue(10)
        elif 3 < len(selection) < 5:
            self.dlg.shiftdoubleSpinBox.setValue(5)
        else:
            self.dlg.shiftdoubleSpinBox.setValue(2)
        # this puts the dialog box somewhere near the top right portion of the canvas    
        self.mapcanvas_upperleft = self.iface.mapCanvas().mapToGlobal(QPoint(600, 100))
        offset_x = 24
        offset_y = 43
        pos_x = self.mapcanvas_upperleft.x() + offset_x
        pos_y = self.mapcanvas_upperleft.y() + offset_y
        self.dlg.setGeometry(pos_x, pos_y, 400, 300)

        # show the dialog
        self.dlg.show()
        
        # Adjust the spinbox value based on the dial position
        self.dlg.dial.valueChanged.connect(self.asbv)
        
        # Run the dialog event loop
        result = self.dlg.exec_()
        
        #get value form spinbox 
        self.myang = self.dlg.spinBox.value()
        self.myLength = self.dlg.shiftdoubleSpinBox.value()
        # See if OK was pressed
        if result:            
            # set length to zero because we dont want to 
            # change the first feature position
            length = 0
            # iterate over features
            for feature in selection:
                # do whatever you need with the feature
                geom = feature.geometry().asPoint()
                old_x = geom[0]
                old_y = geom[1]            
                #calculate new position using length
                endx = length * math.cos(math.radians(self.myang))
                endy = length * math.sin(math.radians(self.myang))
                new_x = old_x + endx
                new_y = old_y + endy
                # get attribute index
                field_index = feature.fields().indexFromName('HAS_DUPLIC')              
                # update feature attribute            
                layer.dataProvider().changeAttributeValues({feature.id(): {field_index : 'No'}})
                # update feature position with new coordinates
                layer.dataProvider().changeGeometryValues({feature.id(): QgsGeometry.fromPointXY(QgsPointXY(new_x, new_y))})
                # n = n + 2
                # update length for other dulicate positions
                length = length + self.myLength
            #layer.commitChanges()
            self.iface.mapCanvas().refreshAllLayers()
            #deselect all features
            for a in self.iface.attributesToolBar().actions():
                if a.objectName() == 'mActionDeselectAll':
                    a.trigger()
                    break
